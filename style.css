/* The :not() pseudo-selector is used to target all elements that 
do not match the selector - in this case, any of your span elements 
that do not have the sr-only class. 
This ensures that your earlier rules for the span[class~="sr-only"] 
selector are not overwritten. */

/* ------------------------------------------------- */

/* Before you get too far into your styling,
you should make use of the sr-only class. 
You can use CSS to make elements with this class completely 
hidden from the visual page, but still be announced by screen readers. 
The CSS you are about to write is a common set of properties used 
to ensure elements are completely hidden visually. 
The span[class~="sr-only"] selector will select any span element 
whose class includes sr-only. Create that selector,
and give it a border property set to 0. */
span[class~="sr-only"] {

/* Rather than having to constantly double-check you are not 
overwriting your earlier properties, you can use the !important 
keyword to ensure these properties are always applied,
regardless of order or specificity. */
    border: 0 !important;

/* The CSS clip property is used to define the visible portions 
of an element. Set the span[class~="sr-only"] selector to have a 
clip property of rect(1px, 1px, 1px, 1px). 
The clip-path property determines the shape the clip property 
should take. Set the clip-path property to the value of inset(50%),
forming the clip-path into a rectangle within the element. */
    clip: rect(1px, 1px, 1px, 1px) !important;
    clip-path: inset(50%) !important;

/* Now you need to size these elements down. 
Give your span[class~="sr-only"] selector a width and height 
property set to 1px. */
    height: 1px !important;
    width: 1px !important;

/* To prevent the text content from overflowing,
give your span[class~="sr-only"] selector an overflow property 
set to hidden and a white-space property set to nowrap. */
    overflow: hidden !important;
    white-space: nowrap !important;

/* Finally,
you need to take these hidden elements out of the document flow. 
Give the span[class~="sr-only"] selector a position property set 
to absolute, a padding property set to 0,
and a margin property set to -1px. 
This will ensure that not only are they no longer visible,
but they are not even within the page view. */
    position: absolute !important;
    padding: 0 !important;
    margin: -1px !important;
}

html {
    box-sizing: border-box;
}

body {
    font-family: sans-serif;
    color: #0a0a23;
}

.logo {
    position: relative;
    top: 5rem;
    margin-left: 53rem;
    z-index: 1; /* Ensure the logo is above other content */
}

.logo img {
    height: 50px; /* Adjust the height as needed */
}


h1 {
    max-width: 37.25rem;
    margin: 0 auto;
    padding: 1.5rem 1.25rem;
    color: #00b4c2;
}

h1 .flex {
    display: flex;

/* Give it a display property set to flex to enable the flexbox 
layout. 
Then set the flex-direction property to column-reverse - 
this will display the nested elements from bottom to top. */
    flex-direction: column-reverse;
    gap: 1rem;
}

/* The :first-of-type pseudo-selector is used to target the first 
element that matches the selector. 
Create an h1 .flex span:first-of-type selector to target 
the first span element in your .flex container. 
Remember that your span elements are reversed, visually,
so this will appear to be the second element on the page. */
h1 .flex span:first-of-type {
    font-size: 0.7em;
}

h1 .flex span:last-of-type {
    font-size: 1.2em;
}

section {
    max-width: 40rem;
    margin: 0 auto;
    border: 2px solid #d0d0d5;
}

#years {
    display: flex;
    justify-content: flex-end;

/* Adding position sticky moved the element into its own stack. 
To ensure your #years element does not get hidden by different 
stacks, add a z-index property set to 999 in the #years rule. */
    position: sticky;
    z-index: 999;
    top: 0;
    background: #00b4c2;
    color: #fff;
    padding: 0.5rem calc(1.25rem + 2px) 0.5rem 0;
    margin: 0 -2px;
}

/* Style the text within your #years element by creating 
a #years span[class] selector. 
The span[class] syntax will target any span element that has 
a class attribute set, regardless of the attribute's value. */
#years span[class] {
    font-weight: bold;
    width: 4.5rem;
    text-align: right;
}

.table-wrap {
    padding: 0 0.75rem 1.5rem 0.75rem;
}

/* Create a table selector to target your tables. 
Set the border-collapse property to collapse,
which will allow cell borders to collapse into a single border,
instead of a border around each cell. */
table {
    border-collapse: collapse;
    border: 0;
    width: 100%;
    position: relative;
    margin-top: 3rem;
}

table caption {
    color: #00a1ad;
    font-size: 1.3em;
    font-weight: normal;
    position: absolute;
    top: -2.25rem;
    left: 0.5rem;
}

/* Create a selector to target your td elements within your table 
body. Give them a width to fill the viewport, with a minimum and 
maximum of 4rem. This approach ensures that the width is fixed,
whereas setting width specifically would allow the elements 
to shrink to the container. */
tbody td {
    width: 100vw;
    min-width: 4rem;
    max-width: 4rem;
}

tbody th {
    width: calc(100% - 12rem);
}

tr[class="total"] {
    border-bottom: 4px double #00b4c2;
    font-weight: bold;
}

tr[class="total"] th {
    text-align: left;
    padding: 0.5rem 0 0.25rem 0.5rem;
}

/* The key difference between tr[class="total"] and tr.total is 
that the first will select tr elements where the "only" class is 
total. The second will select tr elements where the class "includes" 
total. In your case, tr total will work. 
You can use this selector to target all td elements 
within your .total rows. */
tr.total td {
    text-align: right;
    padding: 0 0.25rem;
}

/* The :nth-of-type() pseudo-selector is used to target specific 
elements based on their order among siblings of the same type. 
Use this pseudo-selector to target the third td element within 
your total table rows. */
tr.total td:nth-of-type(3) {
    padding-right: 0.5rem;
}

tr.total:hover {
    background-color: #99c9ff;
}

td.current {
    font-style: italic;
}

tr.data {
    background-image: linear-gradient(to bottom, #00b5c227 1.845rem, white 1.845rem);
}

tr.data th {
    text-align: left;
    padding-top: 0.3rem;
    padding-left: 0.5rem;
}

tr.data th .description {
    display: block;
    font-weight: normal;
    font-style: italic;
    padding: 1rem 0 0.75rem;
    margin-right: -13.5rem;
}

/* Your dollar amounts are currently misaligned. 
Create a selector to target the td elements within your 
tr.data elements. Vertically align the text to the top,
horizontally align the text to the right,
and set the padding to 0.3rem 0.25rem 0. */
tr.data td {
    vertical-align: top;
    padding: 0.3rem 0.25rem 0;
    text-align: right;
}

tr.data td:last-of-type {
    padding-right: 0.5rem;
}